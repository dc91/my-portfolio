:root {
  --cubeWidth: 23vw;
  --cubeDistance: calc(var(--cubeWidth)*1.025/-2);
  --cubeDistance2: calc(var(--cubeDistance)*1.04);
}

#deer2Black {
  position: fixed;
  bottom: 80px;
  width: 100vw;
  pointer-events: none; /* Allow clicks to pass through */
}

.skills-container {
  width: 100vw;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  /* perspective: 1000px; */
}


/* -------------------------------- */
/* ----------------CUBE------------ */
/* -------------------------------- */

.cube-wrapper {
  position: relative;
}

.cube {
  position: relative;
  width: var(--cubeWidth);
  height: var(--cubeWidth);
  /* max-width: 500px;
  max-height: 500px; */
  transform-style: preserve-3d;
}

.face {
  position: absolute;
  margin-top: -3rem;
  width: 100%;
  height: 100%;
  background: #333;
  color: #fff;
  font-size: 2.8vw;
  font-weight: bold;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  transition: background-color 0.3s ease, box-shadow 0.3s ease; 
}


/* -------------------------------- */
/* ------------CIRCLES------------- */
/* -------------------------------- */

.circles-container {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  position: absolute;
  top: 10.5rem;
  left: -5rem;
  scale: 0.8;
  opacity: 0;
  animation: fadeIn 1s forwards;
  animation-delay: 2s; /* wait until the cube is done expanding */
}

.circle {
  background: #ff5722;
  width: 8rem;
  height: 8rem;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  color: #fff;
  font-size: 1.4rem;
}

@keyframes fadeIn {
  to {
    opacity: 1;
    scale: 1;
  }
}


/* -------------------------------- */
/* ----------RESET BUTTON---------- */
/* -------------------------------- */
.reset-button {
  position: absolute;
  top: 1rem;
  right: -55%;
  display: inline-block;
  cursor: pointer;
  opacity: 0;
  animation: fadeIn 1s forwards;
  animation-delay: 2s; /* wait until the cube is done expanding */
}
.reset-button {
  color: #999;
  font-weight: bold;
  transition: all 1s ease;
}

.reset-button:hover {
  color: #fff;
}


/* -------------------------------- */
/* ------------HOVER FACE---------- */
/* -------------------------------- */

/* Hover effects only when not expanded or collapsing */
.cube-wrapper:not(.show-frontend):not(.show-backend):not(.show-design):not(.collapsing-frontend):not(.collapsing-backend):not(.collapsing-design) .front:hover {
  box-shadow: 0 0 50px 15px #48abe0;
}

.cube-wrapper:not(.show-frontend):not(.show-backend):not(.show-design):not(.collapsing-frontend):not(.collapsing-backend):not(.collapsing-design) .right:hover {
  box-shadow: 0 0 50px 15px #e04848;
}

.cube-wrapper:not(.show-frontend):not(.show-backend):not(.show-design):not(.collapsing-frontend):not(.collapsing-backend):not(.collapsing-design) .left:hover {
  box-shadow: 0 0 50px 15px #e0dd48;
}

/* Prevent hover styles when expanded or collapsing */
.cube-wrapper.expanded .front:hover,
.cube-wrapper.expanded .right:hover,
.cube-wrapper.expanded .left:hover,
.cube-wrapper.collapsing-frontend .front:hover,
.cube-wrapper.collapsing-backend .right:hover,
.cube-wrapper.collapsing-design .left:hover {
  background-color: #333;
  box-shadow: none; /* Remove box-shadow */
  cursor: default; /* Change cursor to default */
}


/* -------------------------------- */
/* ------------BREATHING----------- */
/* -------------------------------- */

/* Apply breathe animation only when not expanded or collapsing */
.cube-wrapper:not(.show-frontend):not(.show-backend):not(.show-design):not(.collapsing-frontend):not(.collapsing-backend):not(.collapsing-design) .cube {
  animation: breathe 2s ease-in-out infinite alternate;
}
.front {
  animation: breatheFront 2s ease-in-out infinite alternate;
}
.right {
  animation: breatheRight 2s ease-in-out infinite alternate;
}
.left {
  animation: breatheLeft 2s ease-in-out infinite alternate;
}

@keyframes breathe {
  0% { transform: rotateX(40deg) rotateY(50deg) scale(1.0); }
  100% { transform: rotateX(40deg) rotateY(50deg) scale(1.02); }
}

@keyframes breatheFront {
  0% { transform: translateZ(var(--cubeDistance)); }
  100% { transform: translateZ(var(--cubeDistance2)); }
}

@keyframes breatheRight {
  0% { transform: rotateY(-90deg) translateZ(var(--cubeDistance)); }
  100% { transform: rotateY(-90deg) translateZ(var(--cubeDistance2)); }
}

@keyframes breatheLeft {
  0% { transform: rotateX(-90deg) translateZ(var(--cubeDistance)); }
  100% { transform: rotateX(-90deg) translateZ(var(--cubeDistance2)); }
}

/* When paused (after a face is clicked), we can stop the breathing by removing animation */
.cube.paused {
  animation: none;
}


/* -------------------------------- */
/* ---------EXPAND/COLLAPSE-------- */
/* -------------------------------- */

/* FRONTEND FACE SELECTED */
.cube-wrapper.show-frontend .cube {
  animation: expandFrontend 3s forwards;
}

/* BACKEND FACE SELECTED */
.cube-wrapper.show-backend .cube {
  animation: expandBackend 3s forwards;
}

/* DESIGN FACE SELECTED */
.cube-wrapper.show-design .cube {
  animation: expandDesign 3s forwards;
}

/* Collapse Animations */
.cube-wrapper.collapsing-frontend .cube {
  animation: collapseFrontend 3s forwards;
}

.cube-wrapper.collapsing-backend .cube {
  animation: collapseBackend 3s forwards;
}

.cube-wrapper.collapsing-design .cube {
  animation: collapseDesign 3s forwards;
}

@keyframes expandFrontend {
  0% {
    /* Match the end of 'breathe': rotateX(40deg) rotateY(50deg) scale(1.05) */
    transform: rotateX(40deg) rotateY(50deg) scale(1.05);
    right: 0;
    top: 0;
    margin-right: 0;
    
  }
  25% {
    /* Face is straight forward now but not scaled up yet */
    transform: rotateX(0deg) rotateY(0deg) scale(1.0);
    width: var(--cubeWidth);
    height: var(--cubeWidth);
  }
  100% {
    /* Scaled up */
    width: 33rem;
    max-width: 38vw;
    height: 100vh;
    right: -60%;
    z-index: -1;
  }
}

@keyframes expandBackend {
  0% {
    transform: rotateX(40deg) rotateY(50deg) scale(1.05);
    right: 0;
    top: 0;
    margin-right: 0;
  }
  50% {
    transform: rotateX(0deg) rotateY(90deg) scale(1.0);
    width: var(--cubeWidth);
    height: var(--cubeWidth);
  }
  100% {
    transform: rotateX(0deg) rotateY(90deg);
    width: 33rem;
    max-width: 35vw;
    height: 100vh;
    right: -60%;
    z-index: -1;
  }
}

@keyframes expandDesign {
  0% {
    transform: rotateX(40deg) rotateY(50deg) scale(1.05);
    right: 0;
    top: 0;
    margin-right: 0;
  }
  50% {
    transform: rotateX(90deg) rotateY(0deg) scale(1.0);
    width: var(--cubeWidth);
    height: var(--cubeWidth);
  }
  100% {
    transform: rotateX(90deg) rotateY(0deg);
    width: 33rem;
    max-width: 35vw;
    height: 100vh;
    right: -60%;
    z-index: -1;
  }
}

@keyframes collapseFrontend {
  0% {
    /* Expanded State */
    z-index: -1;
    width: 33rem;
    height: 100vh;
    right: -60%;
    transform: rotateX(0deg) rotateY(0deg) scale(1.0);
  }
  25% {
    /* Face is straight forward now but not scaled up yet */
    transform: rotateX(0deg) rotateY(0deg) scale(1.0);
    width: var(--cubeWidth);
    height: var(--cubeWidth);
  }
  100% {
    /* Initial State */
    transform: rotateX(40deg) rotateY(50deg) scale(1.0);
    right: 0;
    width: var(--cubeWidth);
    height: var(--cubeWidth);
    z-index: 1;
  }
}

@keyframes collapseBackend {
  0% {
    z-index: -1;
    width: 33rem;
    height: 100vh;
    right: -60%;
    transform: rotateX(0deg) rotateY(90deg) scale(1.0);
  }
  50% {
    transform: rotateX(0deg) rotateY(90deg) scale(1.0);
    width: var(--cubeWidth);
    height: var(--cubeWidth);
  }
  100% {
    transform: rotateX(40deg) rotateY(50deg) scale(1.0);
    right: 0;
    width: var(--cubeWidth);
    height: var(--cubeWidth);
    z-index: 1;
  }
}

@keyframes collapseDesign {
  0% {
    z-index: -1;
    width: 33rem;
    height: 100vh;
    right: -60%;
    transform: rotateX(90deg) rotateY(0deg) scale(1.0);
  }
  50% {
    transform: rotateX(90deg) rotateY(0deg) scale(1.0);
    width: 20vw;
    height: 20vw;
  }
  100% {
    transform: rotateX(40deg) rotateY(50deg) scale(1.0);
    right: 0;
    width: var(--cubeWidth);
    height: var(--cubeWidth);
    z-index: 1;
  }
}
